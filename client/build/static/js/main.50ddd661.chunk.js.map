{"version":3,"sources":["components/Meeting.js","components/Home.js","routes.js","App.js","reportWebVitals.js","index.js"],"names":["videoGrid","id","scrId","localStream","localScreen","socket","roomId","Home","navigate","useNavigate","useState","setRoomId","useEffect","axios","get","then","res","console","log","data","catch","err","response","style","margin","textAlign","display","alignItems","Typography","padding","backgroundColor","Button","variant","color","onClick","useStyles","makeStyles","root","height","grid","overflowX","controls","width","position","bottom","justifyContent","loader","join","textTransform","fontSize","marginRight","fontWeight","transition","mediaConstraints","audio","video","iceServers","urls","scrSocket","conn","scrConn","Meeting","classes","setJoin","loading","setLoading","showControls","setShowControls","setCount","mic","setMic","cam","setCam","scrn","setScrn","enqueueSnackbar","useSnackbar","handleClick","message","a","url","window","location","href","split","length","document","getElementById","myVideo","createElement","muted","navigator","mediaDevices","getUserMedia","stream","addVideoStream","setTimeout","alert","error","addEventListener","event","preventDefault","delta","deltaY","scrollLeft","toggleMic","joined","getTracks","audTrack","find","el","kind","readyState","enabled","stop","removeTrack","addTrack","userId","getSenders","replaceTrack","toggleCam","vidTrack","screenShare","getDisplayMedia","onended","disconnect","io","connect","on","myId","emit","rtcPeerConnection","RTCPeerConnection","forEach","track","onicecandidate","candidate","label","sdpMLineIndex","createOffer","sessionDescription","setLocalDescription","type","sdp","setRemoteDescription","RTCSessionDescription","createAnswer","RTCIceCandidate","addIceCandidate","close","vidEl","remove","count","srcObject","setAttribute","classList","add","play","append","addLocalTracks","setRemoteStream","streams","sendIceCandidate","className","CircularProgress","ontrack","IconButton","marginLeft","routes","path","children","element","to","replace","App","routing","useRoutes","maxSnack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.50ddd661.chunk.js","sourcesContent":["import \"./Meeting.css\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useSnackbar } from \"notistack\";\n\nimport { IconButton, Button, CircularProgress } from \"@material-ui/core\";\n\nimport MicRoundedIcon from \"@material-ui/icons/MicRounded\";\nimport MicOffRoundedIcon from \"@material-ui/icons/MicOffRounded\";\n\nimport VideocamRoundedIcon from \"@material-ui/icons/VideocamRounded\";\nimport VideocamOffRoundedIcon from \"@material-ui/icons/VideocamOffRounded\";\n\nimport ScreenShareRoundedIcon from \"@material-ui/icons/ScreenShareRounded\";\nimport StopScreenShareRoundedIcon from \"@material-ui/icons/StopScreenShareRounded\";\n\nimport FlipCameraAndroidIcon from \"@material-ui/icons/FlipCameraAndroid\";\n\nimport io from \"socket.io-client\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100vh\",\n    backgroundColor: \"#141414\",\n  },\n  grid: {\n    height: \"calc(100vh - 70px)\",\n    display: \"flex\",\n    // flexWrap: \"wrap\",\n    overflowX: \"auto\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  controls: {\n    backgroundColor: \"white\",\n    height: \"70px\",\n    width: \"100vw\",\n    position: \"absolute\",\n    bottom: 0,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loader: {\n    height: \"120px\",\n    width: \"100vw\",\n    position: \"absolute\",\n    bottom: 0,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  join: {\n    textTransform: \"none\",\n    fontSize: \"20px\",\n    padding: \"4px 20px\",\n    marginRight: \"15px\",\n    fontWeight: 600,\n    transition: \"0.3s ease-in-out\",\n    \"&:hover\": {\n      backgroundColor: \"rgb(0, 101, 255)\",\n      color: \"white\",\n    },\n  },\n});\n\nconst mediaConstraints = {\n  audio: true,\n  video: { width: 1280, height: 720 },\n};\n\nconst iceServers = {\n  iceServers: [\n    { urls: \"stun:stun.l.google.com:19302\" },\n    { urls: \"stun:stun1.l.google.com:19302\" },\n    { urls: \"stun:stun2.l.google.com:19302\" },\n    { urls: \"stun:stun3.l.google.com:19302\" },\n    { urls: \"stun:stun4.l.google.com:19302\" },\n  ],\n};\n\nlet videoGrid;\n\nlet id;\nlet scrId;\n\nlet localStream;\nlet localScreen;\n\nlet socket;\nlet scrSocket = null;\n\nlet roomId;\n\nlet conn = {};\nlet scrConn = {};\n\nconst Meeting = () => {\n  const classes = useStyles();\n\n  const [join, setJoin] = useState(-1);\n  const [loading, setLoading] = useState(true);\n  const [showControls, setShowControls] = useState(false);\n\n  const [count, setCount] = useState(0);\n\n  const [mic, setMic] = useState(true);\n  const [cam, setCam] = useState(true);\n  const [scrn, setScrn] = useState(false);\n\n  // const flipButton = useRef(null);\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleClick = (message, variant) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  useEffect(async () => {\n    const url = window.location.href;\n    roomId = url.split(\"/\")[url.split(\"/\").length - 1];\n\n    videoGrid = document.getElementById(\"video-grid\");\n\n    const myVideo = document.createElement(\"video\");\n    myVideo.muted = true;\n\n    let stream;\n    try {\n      stream = await navigator.mediaDevices.getUserMedia(mediaConstraints);\n      // stream = await navigator.mediaDevices.getDisplayMedia();\n\n      localStream = stream;\n      addVideoStream(videoGrid, myVideo, stream, \"my-video\");\n\n      setLoading(false);\n      setTimeout(() => {\n        setShowControls(true);\n      }, [1000]);\n    } catch (error) {\n      alert(\"Could not get user media. Check your media devices or Refresh\");\n      console.error(\"Could not get user media\", error);\n    }\n\n    window.addEventListener(\"wheel\", (event) => {\n      event.preventDefault();\n\n      const delta = event.deltaY;\n      document.getElementById(\"video-grid\").scrollLeft += delta * 0.5;\n    });\n  }, []);\n\n  const toggleMic = async (joined) => {\n    setMic((mic) => !mic);\n    console.log(localStream.getTracks());\n\n    let audTrack = localStream.getTracks().find((el) => {\n      return el.kind === \"audio\";\n    });\n\n    if (audTrack.readyState === \"live\") {\n      audTrack.enabled = !audTrack.enabled;\n\n      setTimeout(() => {\n        audTrack.stop();\n      }, 500);\n    } else {\n      try {\n        let stream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n\n        localStream.removeTrack(audTrack);\n        localStream.addTrack(stream.getTracks()[0]);\n\n        if (joined)\n          for (let userId in conn) {\n            console.log(conn[userId].getSenders());\n            conn[userId].getSenders()[0].replaceTrack(stream.getTracks()[0]);\n          }\n      } catch (error) {\n        alert(\"Could not get user media. Check your media devices or Refresh\");\n        console.error(\"Could not get user media\", error);\n      }\n    }\n  };\n\n  const toggleCam = async (joined) => {\n    setCam((cam) => !cam);\n    console.log(localStream.getTracks());\n\n    let vidTrack = localStream.getTracks().find((el) => {\n      return el.kind === \"video\";\n    });\n\n    if (vidTrack.readyState === \"live\") {\n      vidTrack.enabled = !vidTrack.enabled;\n\n      setTimeout(() => {\n        vidTrack.stop();\n      }, 500);\n    } else {\n      let stream;\n      try {\n        stream = await navigator.mediaDevices.getUserMedia({\n          video: { width: 1280, height: 720 },\n        });\n\n        localStream.removeTrack(vidTrack);\n        localStream.addTrack(stream.getTracks()[0]);\n\n        if (joined)\n          for (let userId in conn) {\n            console.log(conn[userId].getSenders());\n            conn[userId].getSenders()[1].replaceTrack(stream.getTracks()[0]);\n          }\n      } catch (error) {\n        alert(\"Could not get user media. Check your media devices or Refresh\");\n        console.error(\"Could not get user media\", error);\n      }\n    }\n  };\n\n  const connectToSocket = () => {\n    socket = io.connect(\"/\");\n\n    socket.on(\"connected\", async (myId) => {\n      setJoin(1);\n      id = myId;\n\n      console.log(\"User Id : \" + id);\n\n      socket.emit(\"join-room\", roomId, id);\n\n      // SOCKET EVENT CALLBACKS =====================================================\n      socket.on(\"room_created\", async () => {\n        console.log(\"Socket event callback: room_created\");\n      });\n\n      socket.on(\"room_joined\", async () => {\n        console.log(\"Socket event callback: room_joined\");\n\n        socket.emit(\"start_call\", roomId, id);\n      });\n\n      // SOCKET EVENT CALLBACKS =====================================================\n      socket.on(\"start_call\", async (userId) => {\n        console.log(\"Socket event callback: start_call from \" + userId);\n\n        let rtcPeerConnection = new RTCPeerConnection(iceServers);\n        addLocalTracks(rtcPeerConnection);\n\n        conn[userId] = rtcPeerConnection;\n\n        handleClick(userId + \" joined\", \"success\");\n\n        rtcPeerConnection.ontrack = (event) => {\n          setRemoteStream(event, userId);\n        };\n        rtcPeerConnection.onicecandidate = (event) => {\n          sendIceCandidate(event, userId);\n        };\n\n        await createOffer(rtcPeerConnection, userId);\n      });\n\n      socket.on(\"webrtc_offer\", async (event, userId) => {\n        console.log(\"Socket event callback: webrtc_offer from \" + userId);\n\n        let rtcPeerConnection = new RTCPeerConnection(iceServers);\n        addLocalTracks(rtcPeerConnection);\n\n        conn[userId] = rtcPeerConnection;\n\n        rtcPeerConnection.ontrack = (event) => {\n          console.log(event);\n          console.log(userId);\n          setRemoteStream(event, userId);\n        };\n        rtcPeerConnection.onicecandidate = (event) => {\n          sendIceCandidate(event, userId);\n        };\n        rtcPeerConnection.setRemoteDescription(\n          new RTCSessionDescription(event)\n        );\n\n        await createAnswer(rtcPeerConnection, userId);\n      });\n\n      socket.on(\"webrtc_answer\", (event, userId) => {\n        console.log(\"Socket event callback: webrtc_answer from \" + userId);\n\n        conn[userId].setRemoteDescription(new RTCSessionDescription(event));\n      });\n\n      socket.on(\"webrtc_ice_candidate\", (event, userId) => {\n        console.log(\n          \"Socket event callback: webrtc_ice_candidate from \" + userId\n        );\n\n        // ICE candidate configuration.\n        var candidate = new RTCIceCandidate({\n          sdpMLineIndex: event.label,\n          candidate: event.candidate,\n        });\n        conn[userId].addIceCandidate(candidate);\n      });\n\n      socket.on(\"user-disconnected\", (userId) => {\n        handleClick(userId + \" left\", \"error\");\n\n        if (conn[userId]) conn[userId].close();\n\n        const vidEl = document.getElementById(userId);\n        if (vidEl) {\n          vidEl.remove();\n          setCount((count) => count - 1);\n        }\n      });\n    });\n  };\n\n  const toggleScrn = async () => {\n    setScrn((scrn) => !scrn);\n\n    if (cam) {\n      setCam((cam) => !cam);\n      console.log(localStream.getTracks());\n\n      let vidTrack = localStream.getTracks().find((el) => {\n        return el.kind === \"video\";\n      });\n\n      if (vidTrack.readyState === \"live\") {\n        vidTrack.enabled = !vidTrack.enabled;\n\n        setTimeout(async () => {\n          vidTrack.stop();\n\n          try {\n            let stream = await navigator.mediaDevices.getDisplayMedia();\n            localStream.removeTrack(vidTrack);\n            localStream.addTrack(stream.getTracks()[0]);\n\n            console.log(localStream.getTracks());\n            for (let userId in conn) {\n              console.log(conn[userId].getSenders());\n              conn[userId].getSenders()[1].replaceTrack(stream.getTracks()[0]);\n            }\n\n            stream.getTracks()[0].onended = () => {\n              setScrn(false);\n              localStream.getTracks()[1].enabled = false;\n\n              for (let userId in conn) {\n                conn[userId].getSenders()[1].track.enabled = false;\n              }\n            };\n          } catch (error) {\n            alert(\"Could not get display media. Try again\");\n            console.error(\"Could not get display media\", error);\n          }\n        }, 500);\n      }\n    } else {\n      let vidTrack = localStream.getTracks().find((el) => {\n        return el.kind === \"video\";\n      });\n\n      console.log(vidTrack);\n\n      if (vidTrack.readyState === \"live\") {\n        console.log(localStream.getTracks());\n        vidTrack.enabled = !vidTrack.enabled;\n        setTimeout(() => {\n          vidTrack.stop();\n        }, 500);\n      } else {\n        let stream;\n        try {\n          stream = await navigator.mediaDevices.getDisplayMedia();\n          localStream.removeTrack(vidTrack);\n          localStream.addTrack(stream.getTracks()[0]);\n\n          console.log(localStream.getTracks());\n          for (let userId in conn) {\n            console.log(conn[userId].getSenders());\n            conn[userId].getSenders()[1].replaceTrack(stream.getTracks()[0]);\n          }\n\n          stream.getTracks()[0].onended = () => {\n            setScrn(false);\n            localStream.getTracks()[1].enabled = false;\n\n            for (let userId in conn) {\n              conn[userId].getSenders()[1].track.enabled = false;\n            }\n          };\n        } catch (error) {\n          alert(\"Could not get display media. Try again\");\n          console.error(\"Could not get display media\", error);\n        }\n      }\n    }\n  };\n\n  const screenShare = async () => {\n    if (scrSocket === null) {\n      // const myVideo = document.createElement(\"video\");\n      // myVideo.muted = true;\n\n      let stream;\n      try {\n        stream = await navigator.mediaDevices.getDisplayMedia();\n        // stream = await navigator.mediaDevices.getDisplayMedia();\n\n        localScreen = stream;\n        setScrn(true);\n        // addVideoStream(videoGrid, myVideo, stream, \"my-screen\");\n\n        stream.getTracks()[0].onended = () => {\n          setScrn(false);\n          scrSocket.disconnect();\n          scrSocket = null;\n        };\n\n        scrSocket = io.connect(\"/\");\n\n        scrSocket.on(\"connected\", async (myId) => {\n          setJoin(1);\n          scrId = myId;\n\n          console.log(\"User Id : \" + scrId);\n\n          scrSocket.emit(\"join-room\", roomId, scrId);\n\n          // SOCKET EVENT CALLBACKS =====================================================\n          scrSocket.on(\"room_created\", async () => {\n            console.log(\"Socket event callback: room_created\");\n          });\n\n          scrSocket.on(\"room_joined\", async () => {\n            console.log(\"Socket event callback: room_joined\");\n\n            scrSocket.emit(\"start_call\", roomId, scrId);\n          });\n\n          scrSocket.on(\"start_call\", async (userId) => {\n            console.log(\"Socket event callback: start_call from \" + userId);\n\n            let rtcPeerConnection = new RTCPeerConnection(iceServers);\n            // addLocalTracks(rtcPeerConnection);\n            localScreen.getTracks().forEach((track) => {\n              rtcPeerConnection.addTrack(track, localScreen);\n            });\n\n            scrConn[userId] = rtcPeerConnection;\n\n            // handleClick(userId + \" joined\", \"success\");\n\n            // rtcPeerConnection.ontrack = (event) => {\n            //   setRemoteStream(event, userId);\n            // };\n            rtcPeerConnection.onicecandidate = (event) => {\n              // sendIceCandidate(event, userId);\n              if (event.candidate) {\n                scrSocket.emit(\n                  \"webrtc_ice_candidate\",\n                  {\n                    roomId,\n                    label: event.candidate.sdpMLineIndex,\n                    candidate: event.candidate.candidate,\n                  },\n                  scrId\n                );\n              }\n            };\n\n            // await createOffer(rtcPeerConnection, userId);\n            let sessionDescription;\n            try {\n              sessionDescription = await rtcPeerConnection.createOffer();\n              rtcPeerConnection.setLocalDescription(sessionDescription);\n\n              scrSocket.emit(\n                \"webrtc_offer\",\n                {\n                  type: \"webrtc_offer\",\n                  sdp: sessionDescription,\n                  roomId,\n                },\n                userId,\n                scrId\n              );\n            } catch (error) {\n              console.error(error);\n            }\n          });\n\n          scrSocket.on(\"webrtc_offer\", async (event, userId) => {\n            console.log(\"Socket event callback: webrtc_offer from \" + userId);\n\n            let rtcPeerConnection = new RTCPeerConnection(iceServers);\n            // addLocalTracks(rtcPeerConnection);\n            localScreen.getTracks().forEach((track) => {\n              rtcPeerConnection.addTrack(track, localScreen);\n            });\n\n            scrConn[userId] = rtcPeerConnection;\n\n            // rtcPeerConnection.ontrack = (event) => {\n            //   setRemoteStream(event, userId);\n            // };\n            rtcPeerConnection.onicecandidate = (event) => {\n              // sendIceCandidate(event, userId);\n              if (event.candidate) {\n                scrSocket.emit(\n                  \"webrtc_ice_candidate\",\n                  {\n                    roomId,\n                    label: event.candidate.sdpMLineIndex,\n                    candidate: event.candidate.candidate,\n                  },\n                  scrId\n                );\n              }\n            };\n            rtcPeerConnection.setRemoteDescription(\n              new RTCSessionDescription(event)\n            );\n\n            // await createAnswer(rtcPeerConnection, userId);\n            let sessionDescription;\n            try {\n              sessionDescription = await rtcPeerConnection.createAnswer();\n              rtcPeerConnection.setLocalDescription(sessionDescription);\n\n              scrSocket.emit(\n                \"webrtc_answer\",\n                {\n                  type: \"webrtc_answer\",\n                  sdp: sessionDescription,\n                  roomId,\n                },\n                userId,\n                scrId\n              );\n            } catch (error) {\n              console.error(error);\n            }\n          });\n\n          scrSocket.on(\"webrtc_answer\", (event, userId) => {\n            console.log(\"Socket event callback: webrtc_answer from \" + userId);\n\n            scrConn[userId].setRemoteDescription(\n              new RTCSessionDescription(event)\n            );\n          });\n\n          scrSocket.on(\"webrtc_ice_candidate\", (event, userId) => {\n            console.log(\n              \"Socket event callback: webrtc_ice_candidate from \" + userId\n            );\n\n            // ICE candidate configuration.\n            var candidate = new RTCIceCandidate({\n              sdpMLineIndex: event.label,\n              candidate: event.candidate,\n            });\n            scrConn[userId].addIceCandidate(candidate);\n          });\n\n          scrSocket.on(\"user-disconnected\", (userId) => {\n            if (scrConn[userId]) scrConn[userId].close();\n\n            const vidEl = document.getElementById(userId);\n            if (vidEl) {\n              vidEl.remove();\n              setCount((count) => count - 1);\n            }\n          });\n        });\n      } catch (error) {\n        alert(\"Could not get display media. Try again\");\n        console.error(\"Could not get display media\", error);\n      }\n    } else {\n      setScrn(false);\n      scrSocket.disconnect();\n      scrSocket = null;\n      // document.getElementById(\"my-screen\").remove();\n    }\n  };\n\n  const addVideoStream = (videoGrid, video, stream, userId) => {\n    video.srcObject = stream;\n    video.setAttribute(\"id\", userId);\n    video.classList.add(\"video\");\n    video.addEventListener(\"loadedmetadata\", () => {\n      video.play();\n    });\n    videoGrid.append(video);\n\n    // setCount((count) => count + 1);\n  };\n\n  // FUNCTIONS ==================================================================\n  function addLocalTracks(rtcPeerConnection) {\n    localStream.getTracks().forEach((track) => {\n      rtcPeerConnection.addTrack(track, localStream);\n    });\n  }\n\n  async function createOffer(rtcPeerConnection, userId) {\n    let sessionDescription;\n    try {\n      sessionDescription = await rtcPeerConnection.createOffer();\n      rtcPeerConnection.setLocalDescription(sessionDescription);\n\n      socket.emit(\n        \"webrtc_offer\",\n        {\n          type: \"webrtc_offer\",\n          sdp: sessionDescription,\n          roomId,\n        },\n        userId,\n        id\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function createAnswer(rtcPeerConnection, userId) {\n    let sessionDescription;\n    try {\n      sessionDescription = await rtcPeerConnection.createAnswer();\n      rtcPeerConnection.setLocalDescription(sessionDescription);\n\n      socket.emit(\n        \"webrtc_answer\",\n        {\n          type: \"webrtc_answer\",\n          sdp: sessionDescription,\n          roomId,\n        },\n        userId,\n        id\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  function setRemoteStream(event, userId) {\n    console.log(event);\n    if (event.track.kind === \"video\") {\n      let video = document.createElement(\"video\");\n      addVideoStream(videoGrid, video, event.streams[0], userId);\n    }\n  }\n\n  function sendIceCandidate(event, userId) {\n    if (event.candidate) {\n      socket.emit(\n        \"webrtc_ice_candidate\",\n        {\n          roomId,\n          label: event.candidate.sdpMLineIndex,\n          candidate: event.candidate.candidate,\n        },\n        id\n      );\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <div id=\"video-grid\" className={classes.grid}>\n        {loading ? <CircularProgress style={{ margin: \"auto\" }} /> : null}\n      </div>\n      {showControls ? (\n        <div className={classes.controls}>\n          {join === -1 ? (\n            <Button\n              variant=\"outlined\"\n              onClick={() => {\n                connectToSocket();\n                setJoin(0);\n              }}\n              className={classes.join}\n            >\n              Join\n            </Button>\n          ) : join === 0 ? (\n            <CircularProgress />\n          ) : null}\n          <IconButton\n            style={{ color: mic ? \"grey\" : \"red\", marginRight: \"10px\" }}\n            onClick={() => {\n              toggleMic(join === 1);\n            }}\n          >\n            {mic ? (\n              <MicRoundedIcon style={{ fontSize: \"30px\" }} />\n            ) : (\n              <MicOffRoundedIcon style={{ fontSize: \"30px\" }} />\n            )}\n          </IconButton>\n          <IconButton\n            style={{\n              color: cam ? \"grey\" : \"red\",\n              marginLeft: \"10px\",\n              marginRight: \"10px\",\n            }}\n            onClick={() => {\n              toggleCam(join === 1);\n            }}\n          >\n            {cam ? (\n              <VideocamRoundedIcon style={{ fontSize: \"30px\" }} />\n            ) : (\n              <VideocamOffRoundedIcon style={{ fontSize: \"30px\" }} />\n            )}\n          </IconButton>\n          {join === 1 ? (\n            <IconButton\n              style={{ color: scrn ? \"grey\" : \"red\", marginLeft: \"10px\" }}\n              onClick={() => {\n                // toggleScrn();\n                screenShare();\n              }}\n            >\n              {scrn ? (\n                <ScreenShareRoundedIcon style={{ fontSize: \"30px\" }} />\n              ) : (\n                <StopScreenShareRoundedIcon style={{ fontSize: \"30px\" }} />\n              )}\n            </IconButton>\n          ) : null}\n          {/* <IconButton\n          style={{ marginLeft: \"20px\", display: \"none\" }}\n          ref={flipButton}\n        >\n          <FlipCameraAndroidIcon style={{ fontSize: \"30px\" }} />\n        </IconButton> */}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Meeting;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Typography, Button } from \"@material-ui/core\";\n\nimport { useNavigate } from \"react-router-dom\";\n\nimport axios from \"axios\";\n\nconst Home = () => {\n  const navigate = useNavigate();\n\n  const [roomId, setRoomId] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(\"/api/call\")\n      .then((res) => {\n        console.log(res.data);\n        setRoomId(res.data);\n      })\n      .catch((err) => {\n        console.log(err.response);\n      });\n  }, []);\n\n  return (\n    <div style={{ margin: \"0px 0px 0px 30px\" }}>\n      <h1 style={{ textAlign: \"left\" }}>Video Conference App</h1>\n\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Typography>Your meeting ID</Typography>\n        <div\n          style={{\n            padding: \"10px 10px\",\n            margin: \"0px 20px\",\n            backgroundColor: \"rgb(0,0,0,0.1)\",\n          }}\n        >\n          {roomId}\n        </div>\n      </div>\n      <div style={{ display: \"flex\" }}>\n        <Button\n          variant=\"contained\"\n          style={{\n            backgroundColor: \"rgb(0, 131, 255)\",\n            color: \"white\",\n            margin: \"20px 100px\",\n          }}\n          onClick={() => {\n            navigate(`/${roomId}`);\n          }}\n        >\n          JOIN MEETING\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\nimport Home from \"./components/Home\";\nimport Meeting from \"./components/Meeting\";\n\nconst routes = [\n  {\n    path: \"/\",\n    // element: <Layout />,\n    children: [\n      { path: \"/\", element: <Home /> },\n      { path: \"/:roomId\", element: <Meeting /> },\n      { path: \"*\", element: <Navigate to=\"/\" replace /> },\n    ],\n  },\n];\n\nexport default routes;\n","import \"./App.css\";\nimport React from \"react\";\n\nimport routes from \"./routes\";\n\nimport { useRoutes } from \"react-router-dom\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\n\nfunction App() {\n  const routing = useRoutes(routes);\n\n  return (\n    <div className=\"App\">\n      <SnackbarProvider maxSnack={3}>{routing}</SnackbarProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}